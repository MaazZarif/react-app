{"ast":null,"code":"var _jsxFileName = \"E:\\\\react1\\\\my-app\\\\src\\\\components'\\\\Textform.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Textform(props) {\n  _s();\n  const handleUpclick = () => {\n    console.log(\"uppercase was clicked\" + text);\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to upper case\", \"success\");\n  };\n  const handleonchange = event => {\n    console.log(\"on change\");\n    setText(event.target.value);\n  };\n  // const [mystyle, setmystyle] = useState({\n  //     color: \"#042743\",\n  //     backgroundColor: \"white\"\n  // })\n  const [text, setText] = useState(\"Enter Text Here\");\n  // const [btntext, setbtntext] = useState(\"Enable Dark Mode\")\n\n  // const togglestyle = () => {\n  //     if (mystyle.color === \"#042743\") {\n  //         setmystyle({\n  //             color: \"white\",\n  //             backgroundColor: \"#042743\",\n  //             border: \"1px solid white\"\n  //         })\n  //         setbtntext(\"Enable Light Mode\")\n  //     }\n  //     else {\n  //         setmystyle({\n  //             color: \"#042743\",\n  //             backgroundColor: \"White\"\n  //         })\n  //         setbtntext(\"Enable Dark Mode\")\n  //     }\n  // }\n\n  // to change text \n  // setText(\"new text\") \n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        color: props.mode === \"dark\" ? 'white' : '#042743'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          value: text,\n          style: {\n            color: props.mode === \"dark\" ? 'black' : '#042743'\n          },\n          onChange: handleonchange,\n          id: \"myBox\",\n          rows: \"8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary \",\n        onClick: handleUpclick,\n        children: \"Convert to uppercase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        color: props.mode === \"dark\" ? 'white' : '#042743'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your text summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"!input.trim()\" ? \"return 0\" : \"text.trim().split(/\\s+/).length\", \" words and \", text.length, \" characters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"you will take approx \", 0.008 * text.split(\" \").length, \" minutes to read\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: text.length > 0 ? text : \"Write something above to preview it  here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Textform, \"zbSZTvWqRTbUJlkTkmVoGrClxdM=\");\n_c = Textform;\nvar _c;\n$RefreshReg$(_c, \"Textform\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Textform","props","_s","handleUpclick","console","log","text","newText","toUpperCase","setText","showAlert","handleonchange","event","target","value","children","className","style","color","mode","heading","fileName","_jsxFileName","lineNumber","columnNumber","onChange","id","rows","onClick","length","split","_c","$RefreshReg$"],"sources":["E:/react1/my-app/src/components'/Textform.js"],"sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const handleUpclick = () => {\r\n        console.log(\"uppercase was clicked\" + text)\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to upper case\", \"success\")\r\n    }\r\n    const handleonchange = (event) => {\r\n        console.log(\"on change\")\r\n        setText(event.target.value)\r\n    }\r\n    // const [mystyle, setmystyle] = useState({\r\n    //     color: \"#042743\",\r\n    //     backgroundColor: \"white\"\r\n    // })\r\n    const [text, setText] = useState(\"Enter Text Here\")\r\n    // const [btntext, setbtntext] = useState(\"Enable Dark Mode\")\r\n\r\n    // const togglestyle = () => {\r\n    //     if (mystyle.color === \"#042743\") {\r\n    //         setmystyle({\r\n    //             color: \"white\",\r\n    //             backgroundColor: \"#042743\",\r\n    //             border: \"1px solid white\"\r\n    //         })\r\n    //         setbtntext(\"Enable Light Mode\")\r\n    //     }\r\n    //     else {\r\n    //         setmystyle({\r\n    //             color: \"#042743\",\r\n    //             backgroundColor: \"White\"\r\n    //         })\r\n    //         setbtntext(\"Enable Dark Mode\")\r\n    //     }\r\n    // }\r\n\r\n    // to change text \r\n    // setText(\"new text\") \r\n    return (\r\n        <>\r\n            <div className='container' style={{ color: props.mode === \"dark\" ? 'white' : '#042743' }}  >\r\n                <h1 >{props.heading}</h1>\r\n                <div className=\"mb-3\" >\r\n                    <textarea className=\"form-control\" value={text} style={{ color: props.mode === \"dark\" ? 'black' : '#042743' }} onChange={handleonchange} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary \" onClick={handleUpclick}>Convert to uppercase</button>\r\n                {/* <button className=\"btn btn-primary\" onClick={togglestyle}>{btntext}</button> */}\r\n\r\n\r\n            </div>\r\n            <div className=\"container\" style={{ color: props.mode === \"dark\" ? 'white' : '#042743' }}>\r\n                <h1>Your text summary</h1>\r\n                <p>{\"!input.trim()\" ? \"return 0\" : \"text.trim().split(/\\s+/).length\"} words and {text.length} characters</p>\r\n                <p>you will take approx {0.008 * text.split(\" \").length} minutes to read</p>\r\n                <h1>Preview</h1>\r\n                <p>{text.length > 0 ? text : \"Write something above to preview it  here\"}</p>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}