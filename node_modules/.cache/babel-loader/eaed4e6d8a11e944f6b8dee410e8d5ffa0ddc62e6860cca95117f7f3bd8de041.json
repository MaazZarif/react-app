{"ast":null,"code":"import React,{useState}from'react';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function Textform(props){const handleUpclick=()=>{console.log(\"uppercase was clicked\"+text);let newText=text.toUpperCase();setText(newText);props.showAlert(\"Converted to upper case\",\"success\");};const handleonchange=event=>{console.log(\"on change\");setText(event.target.value);};// const [mystyle, setmystyle] = useState({\n//     color: \"#042743\",\n//     backgroundColor: \"white\"\n// })\nconst[text,setText]=useState(\"Enter Text Here\");const countWords=input=>{if(!input.trim())return 0;return input.trim().split(/\\s+/).length;};const wordCount=countWords(text);// const [btntext, setbtntext] = useState(\"Enable Dark Mode\")\n// const togglestyle = () => {\n//     if (mystyle.color === \"#042743\") {\n//         setmystyle({\n//             color: \"white\",\n//             backgroundColor: \"#042743\",\n//             border: \"1px solid white\"\n//         })\n//         setbtntext(\"Enable Light Mode\")\n//     }\n//     else {\n//         setmystyle({\n//             color: \"#042743\",\n//             backgroundColor: \"White\"\n//         })\n//         setbtntext(\"Enable Dark Mode\")\n//     }\n// }\n// to change text \n// setText(\"new text\") \nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"container\",style:{color:props.mode===\"dark\"?'white':'#042743'},children:[/*#__PURE__*/_jsx(\"h1\",{children:props.heading}),/*#__PURE__*/_jsx(\"div\",{className:\"mb-3\",children:/*#__PURE__*/_jsx(\"textarea\",{className:\"form-control\",value:text,style:{color:props.mode===\"dark\"?'black':'#042743'},onChange:handleonchange,id:\"myBox\",rows:\"8\"})}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary \",onClick:handleUpclick,children:\"Convert to uppercase\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"container\",style:{color:props.mode===\"dark\"?'white':'#042743'},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Your text summary\"}),/*#__PURE__*/_jsxs(\"p\",{children:[wordCount,\" words and \",text.length,\" characters\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"you will take approx \",0.008*text.split(\" \").length,\" minutes to read\"]}),/*#__PURE__*/_jsx(\"h1\",{children:\"Preview\"}),/*#__PURE__*/_jsx(\"p\",{children:text.length>0?text:\"Write something above to preview it  here\"})]})]});}","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Textform","props","handleUpclick","console","log","text","newText","toUpperCase","setText","showAlert","handleonchange","event","target","value","countWords","input","trim","split","length","wordCount","children","className","style","color","mode","heading","onChange","id","rows","onClick"],"sources":["E:/react1/my-app/src/components'/Textform.js"],"sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const handleUpclick = () => {\r\n        console.log(\"uppercase was clicked\" + text)\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to upper case\", \"success\")\r\n    }\r\n    const handleonchange = (event) => {\r\n        console.log(\"on change\")\r\n        setText(event.target.value)\r\n    }\r\n\r\n\r\n    // const [mystyle, setmystyle] = useState({\r\n    //     color: \"#042743\",\r\n    //     backgroundColor: \"white\"\r\n    // })\r\n    const [text, setText] = useState(\"Enter Text Here\")\r\n    const countWords = (input) => {\r\n        if (!input.trim()) return 0;\r\n        return input.trim().split(/\\s+/).length;\r\n    };\r\n    const wordCount = countWords(text);\r\n\r\n    // const [btntext, setbtntext] = useState(\"Enable Dark Mode\")\r\n\r\n    // const togglestyle = () => {\r\n    //     if (mystyle.color === \"#042743\") {\r\n    //         setmystyle({\r\n    //             color: \"white\",\r\n    //             backgroundColor: \"#042743\",\r\n    //             border: \"1px solid white\"\r\n    //         })\r\n    //         setbtntext(\"Enable Light Mode\")\r\n    //     }\r\n    //     else {\r\n    //         setmystyle({\r\n    //             color: \"#042743\",\r\n    //             backgroundColor: \"White\"\r\n    //         })\r\n    //         setbtntext(\"Enable Dark Mode\")\r\n    //     }\r\n    // }\r\n\r\n    // to change text \r\n    // setText(\"new text\") \r\n    return (\r\n        <>\r\n            <div className='container' style={{ color: props.mode === \"dark\" ? 'white' : '#042743' }}  >\r\n                <h1 >{props.heading}</h1>\r\n                <div className=\"mb-3\" >\r\n                    <textarea className=\"form-control\" value={text} style={{ color: props.mode === \"dark\" ? 'black' : '#042743' }} onChange={handleonchange} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary \" onClick={handleUpclick}>Convert to uppercase</button>\r\n                {/* <button className=\"btn btn-primary\" onClick={togglestyle}>{btntext}</button> */}\r\n\r\n\r\n            </div>\r\n            <div className=\"container\" style={{ color: props.mode === \"dark\" ? 'white' : '#042743' }}>\r\n                <h1>Your text summary</h1>\r\n                <p>{wordCount} words and {text.length} characters</p>\r\n                <p>you will take approx {0.008 * text.split(\" \").length} minutes to read</p>\r\n                <h1>Preview</h1>\r\n                <p>{text.length > 0 ? text : \"Write something above to preview it  here\"}</p>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}